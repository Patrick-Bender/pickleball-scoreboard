#include "IRremote.h"

int receiver = 12; // Signal Pin of IR receiver to Arduino Digital Pin 11
//LEDs stuff
#define blue1 25
#define blue2 24
#define red1 22
#define red2 23

//7segment stuff
#define digit1 6 //PWM Display most left display
#define digit2 9 //PWM Display second left
#define digit3 10 //PWM Display second right display
#define digit4 11 //PWM Display most right display

#define DIGIT_ON  LOW
#define DIGIT_OFF  HIGH
#define DISPLAY_BRIGHTNESS  500

boolean duiz = false;
boolean hon = false;

#define segA 2 
#define segB 3 
#define segC 4 
#define segD 5 
#define segE A0 //pin 6 is used bij display 1 for its pwm function
#define segF 7
#define segG 8 
//int segPD = ; 

int team1Score = 0;
int team2Score = 0;
int ledState = 0;

char message;

/*-----( Declare objects )-----*/
IRrecv irrecv(receiver);     // create instance of 'irrecv'
decode_results results;      // create instance of 'decode_results'

void lightNumber(int numberToDisplay) {

#define SEGMENT_ON  HIGH
#define SEGMENT_OFF LOW

  switch (numberToDisplay){

  case 0:
    digitalWrite(segA, SEGMENT_ON);
    digitalWrite(segB, SEGMENT_ON);
    digitalWrite(segC, SEGMENT_ON);
    digitalWrite(segD, SEGMENT_ON);
    digitalWrite(segE, SEGMENT_ON);
    digitalWrite(segF, SEGMENT_ON);
    digitalWrite(segG, SEGMENT_OFF);
    break;

  case 1:
    digitalWrite(segA, SEGMENT_OFF);
    digitalWrite(segB, SEGMENT_ON);
    digitalWrite(segC, SEGMENT_ON);
    digitalWrite(segD, SEGMENT_OFF);
    digitalWrite(segE, SEGMENT_OFF);
    digitalWrite(segF, SEGMENT_OFF);
    digitalWrite(segG, SEGMENT_OFF);
    break;

  case 2:
    digitalWrite(segA, SEGMENT_ON);
    digitalWrite(segB, SEGMENT_ON);
    digitalWrite(segC, SEGMENT_OFF);
    digitalWrite(segD, SEGMENT_ON);
    digitalWrite(segE, SEGMENT_ON);
    digitalWrite(segF, SEGMENT_OFF);
    digitalWrite(segG, SEGMENT_ON);
    break;

  case 3:
    digitalWrite(segA, SEGMENT_ON);
    digitalWrite(segB, SEGMENT_ON);
    digitalWrite(segC, SEGMENT_ON);
    digitalWrite(segD, SEGMENT_ON);
    digitalWrite(segE, SEGMENT_OFF);
    digitalWrite(segF, SEGMENT_OFF);
    digitalWrite(segG, SEGMENT_ON);
    break;

  case 4:
    digitalWrite(segA, SEGMENT_OFF);
    digitalWrite(segB, SEGMENT_ON);
    digitalWrite(segC, SEGMENT_ON);
    digitalWrite(segD, SEGMENT_OFF);
    digitalWrite(segE, SEGMENT_OFF);
    digitalWrite(segF, SEGMENT_ON);
    digitalWrite(segG, SEGMENT_ON);
    break;

  case 5:
    digitalWrite(segA, SEGMENT_ON);
    digitalWrite(segB, SEGMENT_OFF);
    digitalWrite(segC, SEGMENT_ON);
    digitalWrite(segD, SEGMENT_ON);
    digitalWrite(segE, SEGMENT_OFF);
    digitalWrite(segF, SEGMENT_ON);
    digitalWrite(segG, SEGMENT_ON);
    break;

  case 6:
    digitalWrite(segA, SEGMENT_ON);
    digitalWrite(segB, SEGMENT_OFF);
    digitalWrite(segC, SEGMENT_ON);
    digitalWrite(segD, SEGMENT_ON);
    digitalWrite(segE, SEGMENT_ON);
    digitalWrite(segF, SEGMENT_ON);
    digitalWrite(segG, SEGMENT_ON);
    break;

  case 7:
    digitalWrite(segA, SEGMENT_ON);
    digitalWrite(segB, SEGMENT_ON);
    digitalWrite(segC, SEGMENT_ON);
    digitalWrite(segD, SEGMENT_OFF);
    digitalWrite(segE, SEGMENT_OFF);
    digitalWrite(segF, SEGMENT_OFF);
    digitalWrite(segG, SEGMENT_OFF);
    break;

  case 8:
    digitalWrite(segA, SEGMENT_ON);
    digitalWrite(segB, SEGMENT_ON);
    digitalWrite(segC, SEGMENT_ON);
    digitalWrite(segD, SEGMENT_ON);
    digitalWrite(segE, SEGMENT_ON);
    digitalWrite(segF, SEGMENT_ON);
    digitalWrite(segG, SEGMENT_ON);
    break;

  case 9:
    digitalWrite(segA, SEGMENT_ON);
    digitalWrite(segB, SEGMENT_ON);
    digitalWrite(segC, SEGMENT_ON);
    digitalWrite(segD, SEGMENT_ON);
    digitalWrite(segE, SEGMENT_OFF);
    digitalWrite(segF, SEGMENT_ON);
    digitalWrite(segG, SEGMENT_ON);
    break;

  case 10:
    digitalWrite(segA, SEGMENT_OFF);
    digitalWrite(segB, SEGMENT_OFF);
    digitalWrite(segC, SEGMENT_OFF);
    digitalWrite(segD, SEGMENT_OFF);
    digitalWrite(segE, SEGMENT_OFF);
    digitalWrite(segF, SEGMENT_OFF);
    digitalWrite(segG, SEGMENT_OFF);
    break;
  }
 
}

void lightLED(int state){
  if(state == 0){
    digitalWrite(blue1, HIGH);
    digitalWrite(blue2, LOW);
    digitalWrite(red1, LOW);
    digitalWrite(red2, LOW);
  }
  //server 2 team 1
  else if (state == 1){
    digitalWrite(blue1, HIGH);
    digitalWrite(blue2, HIGH);
    digitalWrite(red1, LOW);
    digitalWrite(red2, LOW);
  }
  //server 1 team 2
  else if (state == 2){
    digitalWrite(blue1, LOW);
    digitalWrite(blue2, LOW);
    digitalWrite(red1, HIGH);
    digitalWrite(red2, LOW);
  }
  //server 2 team 2
  else if (state == 3){
    digitalWrite(blue1, LOW);
    digitalWrite(blue2, LOW);
    digitalWrite(red1, HIGH);
    digitalWrite(red2, HIGH);
  }
}

/*-----( Function )-----*/
void translateIR() // takes action based on IR code received

// describing Remote IR codes 

{

  switch(results.value)

  {
  case 0xFF6897: 
        ledState++;
        ledState%=4;    
        break;
  case 0xFF30CF: 
      team1Score++;
      if (team1Score >99){
        team1Score = 0;
      }
      break;
  case 0xFF18E7: 
      team2Score++;
      if (team2Score >99){
        team2Score = 0;
      }
      break;
  case 0xFF7A85: 
      team1Score--;
      if(team1Score<0){
        team1Score = 0;
      }
      break;
  case 0xFF10EF: 
      team2Score--;
      if(team2Score<0){
        team2Score = 0;
      }
      break;
  case 0xFF38C7:
      team1Score = 0;
      team2Score = 0;
      ledState = 0;
      break;
      

  default: 
    Serial.println(" other button   ");

  }// End Case

  delay(500); // Do not get immediate repeat


} //END translateIR
void setup()   /*----( SETUP: RUNS ONCE )----*/
{
  pinMode(blue1,OUTPUT);
  pinMode(blue2,OUTPUT);
  pinMode(red1,OUTPUT);
  pinMode(red2,OUTPUT);

  pinMode(segA, OUTPUT);
  pinMode(segB, OUTPUT);
  pinMode(segC, OUTPUT);
  pinMode(segD, OUTPUT);
  pinMode(segE, OUTPUT);
  pinMode(segF, OUTPUT);
  pinMode(segG, OUTPUT);
  
  pinMode(digit1, OUTPUT);
  pinMode(digit2, OUTPUT);
  pinMode(digit3, OUTPUT);
  pinMode(digit4, OUTPUT);
  
  irrecv.enableIRIn(); // Start the receiver

}/*--(end setup )---*/


void loop()   /*----( LOOP: RUNS CONSTANTLY )----*/
{
  if (irrecv.decode(&results)) // have we received an IR signal?

  {
    translateIR(); 
    irrecv.resume(); // receive the next value
  }  
     

  lightLED(ledState);
  int figur = (team1Score*100) + team2Score;
  duiz = false;
  hon = false;


 for(int digit = 1 ; digit < 5 ; digit++) { //for loop to place the number in the right digit

    //Turn on a digit for a short amount of time
    switch(digit) {
    case 1:                             
      digitalWrite(digit1, DIGIT_ON);
      lightNumber(figur / 1000);            // for example 2511 / 1000 = 2
      figur %= 1000;                        // new value of figur = 511         figur = figur %1000
      
      delayMicroseconds(DISPLAY_BRIGHTNESS); 
        if (figur < 100){
      duiz = true;
         if (figur <10){
          hon = true;
           
         }
     
      }else duiz = false; 
     
     
      break;
   case 2:
   if(duiz == true){
    digitalWrite(digit2, DIGIT_ON);
    lightNumber(0);
     delayMicroseconds(DISPLAY_BRIGHTNESS);
     
   }if(hon == true){
    break;
   }
   
   if(figur > 99 && figur < 1000){
      digitalWrite(digit2, DIGIT_ON);
      lightNumber(figur / 100);
      figur %= 100;
      delayMicroseconds(DISPLAY_BRIGHTNESS); 
      if (figur < 10){
      hon = true;
      
      }else hon = false;
   }
    
      break;
    case 3:
    if(hon == true){
    digitalWrite(digit3, DIGIT_ON);
    lightNumber(0);
     delayMicroseconds(DISPLAY_BRIGHTNESS);
      break;
     }
   
     if(figur > 9 && figur < 100){
      digitalWrite(digit3, DIGIT_ON);
      lightNumber(figur / 10); 
      figur %= 10;
      delayMicroseconds(DISPLAY_BRIGHTNESS); 
     }
     
      break;
    case 4:
    
    
    
    
     if(figur < 10){
      digitalWrite(digit4, DIGIT_ON);
      lightNumber(figur); 
      delayMicroseconds(DISPLAY_BRIGHTNESS); 
      
      break;
     }
  
     
    }
     //Turn off all segments
    lightNumber(10); 

    //Turn off all digits
    digitalWrite(digit1, DIGIT_OFF);
    digitalWrite(digit2, DIGIT_OFF);
    digitalWrite(digit3, DIGIT_OFF);
    digitalWrite(digit4, DIGIT_OFF);
   }
}
/* --(end main loop )-- */
